#!/usr/bin/python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan, PointCloud
from geometry_msgs.msg import Twist, Point32
import math

class RobotController(Node):
    def __init__(self):
        super().__init__('basic_move_integ')
        self.publisher = self.create_publisher(Twist, '/multi/cmd_nav', 10)
        self.point_cloud_publisher = self.create_publisher(PointCloud, '/points', 10)
        self.subscription = self.create_subscription(LaserScan, 'scan', self.scan_callback, 10)
        self.get_logger().info("Node initialized and ready.")

        # Movement parameters
        self.obstacle_left = False
        self.obstacle_right = False
        self.safe_to_move = True

    def scan_callback(self, scanMsg):
        # Process laser scan data to generate a point cloud
        pointCloud = PointCloud()
        pointCloud.header = scanMsg.header
        distance_threshold = 0.4  # meters
        angle_detection = 45  # degrees

        angle_min = -angle_detection * (math.pi / 180)
        angle_max = angle_detection * (math.pi / 180)
        index_min = int((angle_min - scanMsg.angle_min) / scanMsg.angle_increment)
        index_max = int((angle_max - scanMsg.angle_min) / scanMsg.angle_increment)

        for i in range(index_min, index_max + 1):
            if 0.05 < scanMsg.ranges[i] < distance_threshold:
                angle = scanMsg.angle_min + i * scanMsg.angle_increment
                distance = scanMsg.ranges[i]
                point = Point32(x=math.cos(angle) * distance, y=math.sin(angle) * distance, z=0.0)
                pointCloud.points.append(point)
                if angle > 0:
                    self.obstacle_left = True
                else:
                    self.obstacle_right = True

        # Publish the processed point cloud
        self.point_cloud_publisher.publish(pointCloud)
        self.control_robot()

    def control_robot(self):
        # Determine robot motion based on obstacle detection
        msg = Twist()
        if self.obstacle_left and self.obstacle_right:
            msg.angular.z = -0.5
        elif self.obstacle_left:
            msg.angular.z = 0.5
        elif self.obstacle_right:
            msg.angular.z = -0.5
        else:
            msg.linear.x = 0.5

        # Publish the command
        self.publisher.publish(msg)

def main(args=None):
    rclpy.init(args=args)
    node = RobotController()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()


