#!/usr/bin/python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from std_msgs.msg import String
from cv_bridge import CvBridge
import cv2
import numpy as np
import math
import pyrealsense2 as rs

class GreenObjectDetector(Node):
    def __init__(self):
        super().__init__('green_object_detector')
        self.bridge = CvBridge()
        self.publisher = self.create_publisher(String, 'green_object_detected', 10)
        self.subscription = self.create_subscription(Image, 'sensor_msgs/image', self.image_callback, 10)
        self.detection_threshold = 4000
        self.min_contour_area = 500
        self.color_intrin = None  # Set this to your camera's intrinsic parameters
        self.ghost_detected = False  # Tracking state for ghost detection
        self.ghost_count = 0  # Counter for numbering ghosts

    def get_object_distance(self, depth_frame, x, y):
        depth = depth_frame.get_distance(x, y)
        if depth == 0:
            return None  # Handle missing depth data

        point_3d = rs.rs2_deproject_pixel_to_point(self.color_intrin, [x, y], depth)
        dx, dy, dz = point_3d
        distance = math.sqrt(dx**2 + dy**2 + dz**2)
        return distance

    def image_callback(self, msg):
        frame = self.bridge.imgmsg_to_cv2(msg, "bgr8")
        hsv_image = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        lower_green = np.array([35, 100, 50])
        upper_green = np.array([85, 255, 255])
        mask = cv2.inRange(hsv_image, lower_green, upper_green)
        green_pixel_count = cv2.countNonZero(mask)

        contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        detected_ghosts = False
        self.ghost_count = 0  # Reset the counter for each frame

        for contour in contours:
            if cv2.contourArea(contour) > self.min_contour_area:
                self.ghost_count += 1
                x, y, w, h = cv2.boundingRect(contour)
                cx, cy = x + w//2, y + h//2
                distance = self.get_object_distance(depth_frame, cx, cy)
                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)  # Draw red rectangle
                cv2.putText(frame, f"No. {self.ghost_count}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)
                detected_ghosts = True
                if distance:
                    if not self.ghost_detected:
                        self.publisher.publish(String(data=f"Green ghost No. {self.ghost_count} detected at a distance of {distance:.2f} meters."))
                        self.ghost_detected = True
                else:
                    if not self.ghost_detected:
                        self.publisher.publish(String(data=f"Green ghost No. {self.ghost_count} detected but cannot determine the distance."))
                        self.ghost_detected = True

        if not detected_ghosts:
            if self.ghost_detected:
                self.publisher.publish(String(data="No green ghost detected."))
                self.ghost_detected = False

        cv2.imshow('Original Image', frame)
        cv2.imshow('Green Mask', mask)
        cv2.waitKey(1)

def main(args=None):
    rclpy.init(args=args)
    node = GreenObjectDetector()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()


